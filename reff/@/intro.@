// intro.@
// これでコメント。これ以外の方法でコメントする意味ある？ないよなぁ？
@direc:include "sysbio.@h" // sysbioはSYStem Basic Input/Output

@class:intro // Javaのクラスを採用してみる。mdl(モジュール)でもいいかもなぁ。
	@elem:function:public @type:int main[@type:arg args]
		// @type:intで整数型。:signedや:unsignedをつけることも可能。省略時は:signed。
		// @type:arg argsで引数。引数についてはたぶん後で仕様を変えると思う。

		@elem:var:public @type:int demo = 32
		// @elem:var:publicをつけるとpublicな変数になる。function:publicで公開関数。
		// :publicを省略時はprivate。

		@sysio:write:stdout "Hello, world!"
		@sysio:write:stdout @cast:str:safe demo // @castでキャスト。safeをつけると安全な型変換になる。
		// 安全な型変換では、人にやさしい変換、例えば32という整数値は32という文字列になったりする変換になる。
		// unsafe、つまり安全でない型変換では、システム的な変換、例えば32という整数値は文字コードとして空白文字になったりする変換になる。
		// 省略した場合は安全な型変換になる。

		@elem:var @type:int demo2 = 16
		@elem:var @type:int:ls list = @intro:moreFunction[demo, demo2] // 同じクラス内の時の取り扱い、どうするか・・・

		@ret 0 // return。関数の方に合わせたものを返す必要がある。

	@elem:function:private @type:int:ls moreFunction[@type:arg args]
		@elem:var @type:int tmp = @sysio:getarg[args, 0] // こうなるのかなぁ・・・？わからん。
		@elem:var @type:int tmp2 = @sysio:getarg[args, 1]
		tmp2 +> tmp
		tmp -> tmp2
		-1 *> tmp2
		tmp2 -> tmp
		@ret [tmp, tmp2] // 複数返り値をどう処理するかなぁ。要検討。
